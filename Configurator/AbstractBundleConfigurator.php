<?php

/*
 * This file is part of the QuickInstallBundle package.
 *
 * (c) EXSyst
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace EXSyst\Bundle\QuickInstallBundle\Configurator;

use EXSyst\Bundle\QuickInstallBundle\Bundle;
use EXSyst\Bundle\QuickInstallBundle\Util\Config\ConfigResolver;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Config\Definition\Processor;
use Symfony\Component\DependencyInjection\Extension\ConfigurationExtensionInterface;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Yaml\Yaml;

abstract class AbstractBundleConfigurator implements ConfiguratorInterface
{
    private $kernel;
    private $genericConfigurator;
    private $configFile;

    public function __construct(KernelInterface $kernel, GenericBundleConfigurator $genericConfigurator)
    {
        $this->kernel = $kernel;
        $this->genericConfigurator = $genericConfigurator;
    }

    /**
     * {@inheritdoc}
     */
    final public function configure(Bundle $bundle, SymfonyStyle $io)
    {
        if (!$this->genericConfigurator->configure($bundle, $io)) {
            return;
        }

        $this->doConfigure($bundle, $io);
    }

    abstract protected function doConfigure(Bundle $bundle, SymfonyStyle $io);

    abstract protected function getExtension(Bundle $bundle): ConfigurationExtensionInterface;

    /**
     * @param mixed $config the new bundle config
     */
    final protected function saveConfig($config, Bundle $bundle, SymfonyStyle $io)
    {
        list($extension, $configFile) = $this->getDefaultValues($bundle, $io);
        $yaml = Yaml::parse(file_get_contents($configFile));
        $yaml[$extension->getAlias()] = $config;

        file_put_contents($configFile, Yaml::dump($yaml));

        $io->success(sprintf('"%s" has been updated!', $configFile));
        $io->caution('Don\'t forget to import the generated file in your usual config files!');
    }

    final protected function getConfig(Bundle $bundle, SymfonyStyle $io, $default = []): array
    {
        list($extension, $configFile) = $this->getDefaultValues($bundle, $io);

        if (file_exists($configFile)) {
            $yaml = Yaml::parse(file_get_contents($configFile));

            if (isset($yaml[$extension->getAlias()])) {
                return $yaml[$extension->getAlias()];
            }
        }

        return $default;
    }

    final protected function getAppConfig(Bundle $bundle): array
    {
        $extension = $this->getExtension($bundle);

        $kernel = clone $this->kernel;
        $kernel->boot();

        $method = new \ReflectionMethod($kernel, 'buildContainer');
        $method->setAccessible(true);
        $container = $method->invoke($kernel);
        $container->getCompiler()->compile($container);

        $configs = $container->getExtensionConfig($extension->getAlias());
        $configuration = $extension->getConfiguration($configs, $container);
        if (null === $configuration) {
            throw new \LogicException(sprintf('%s::getConfiguration() is not setup', get_class($extension)));
        }

        $processor = new Processor();

        return $processor->processConfiguration($configuration, $configs);
    }

    private function getDefaultValues(Bundle $bundle, SymfonyStyle $io)
    {
        $extension = $this->getExtension($bundle);
        $configFile = $this->getConfigFile($bundle, $io);

        return [$extension, $configFile];
    }

    private function getConfigFile(Bundle $bundle, SymfonyStyle $io)
    {
        if (null === $this->configFile) {
            $default = '/config/config_generated.yml';

            $io->warning('Any formatting in the config file generated by the library will be lost. Ensure that the file you choose doesn\'t contain important comments. The file path is relative to your kernel path. Only Yaml is supported for now.', null, 'comment');

            $result = $io->ask('Where do you to save your config?', $default);

            $rootDir = $this->kernel->getRootDir();
            $this->configFile = $rootDir.$result;
            touch($this->configFile);
        }

        return $this->configFile;
    }
}
